[
    {
        "id": "1839eba2.cd03f4",
        "type": "watson-conversation-v1",
        "z": "aacd54f2.c13278",
        "name": "Conversation",
        "workspaceid": "efca2e61-fda8-4d27-9ec7-750aa4405fd6",
        "multiuser": false,
        "context": true,
        "default-endpoint": true,
        "service-endpoint": "https://gateway.watsonplatform.net/conversation/api",
        "x": 523.3333435058594,
        "y": 166.99998474121094,
        "wires": [
            [
                "d705d3ce.f47ae"
            ]
        ]
    },
    {
        "id": "86c82250.0052e",
        "type": "telegram command",
        "z": "aacd54f2.c13278",
        "name": "",
        "command": "/phone",
        "bot": "4b287f18.5ee8b",
        "x": 76.3333511352539,
        "y": 197,
        "wires": [
            [
                "53c584df.a430fc",
                "8e7e4eac.02bf3"
            ],
            []
        ]
    },
    {
        "id": "6d97f5fe.6e2c3c",
        "type": "telegram sender",
        "z": "aacd54f2.c13278",
        "name": "",
        "bot": "4b287f18.5ee8b",
        "x": 1516.33349609375,
        "y": 184.66671752929688,
        "wires": [
            []
        ]
    },
    {
        "id": "2ae4c085.95e0b",
        "type": "function",
        "z": "aacd54f2.c13278",
        "name": "Send Conversation Response",
        "func": "var output = msg.payload.output.text;\nfor (var t in output) {\n    msg.payload = {\n        chatId : msg.chatId,\n        type : \"message\",\n        content : output[t]\n    };\n    node.send(msg);\n}\nreturn;",
        "outputs": 1,
        "noerr": 0,
        "x": 1261.3333740234375,
        "y": 94.33332824707031,
        "wires": [
            [
                "6d97f5fe.6e2c3c"
            ]
        ]
    },
    {
        "id": "8e7e4eac.02bf3",
        "type": "function",
        "z": "aacd54f2.c13278",
        "name": "Prepare for Conversation",
        "func": "msg.chatId = msg.payload.chatId;\nmsg.payload = msg.payload.content;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 305.3333435058594,
        "y": 104.99998474121094,
        "wires": [
            [
                "1839eba2.cd03f4"
            ]
        ]
    },
    {
        "id": "53c584df.a430fc",
        "type": "function",
        "z": "aacd54f2.c13278",
        "name": "Prepare For Discovery",
        "func": "msg.chatId = msg.payload.chatId;\nmsg.discoveryparams = {};\nmsg.discoveryparams.query = msg.payload.content;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 289.1667022705078,
        "y": 291.66664695739746,
        "wires": [
            [
                "954ccdec.2a6dc"
            ]
        ]
    },
    {
        "id": "954ccdec.2a6dc",
        "type": "watson-discovery-v1",
        "z": "aacd54f2.c13278",
        "name": "",
        "environmentname": "",
        "environment_id": "1ba26c01-0aed-43fe-801e-3972ccea3a22",
        "collection_id": "83bf254d-edb5-4e8c-8984-37491bc36329",
        "configurationname": "",
        "configuration_id": "",
        "language_code": "en",
        "collection_name": "",
        "count": "1",
        "passages": false,
        "nlp_query": true,
        "query": "",
        "filter": "enriched_Accepted_Answer.sentiment.document.label:!\"negative\"",
        "aggregation": "",
        "return": "",
        "description": "",
        "size": 0,
        "discovery-method": "query",
        "default-endpoint": true,
        "service-endpoint": "https://gateway.watsonplatform.net/discovery/api",
        "x": 529.1667251586914,
        "y": 241.66666793823242,
        "wires": [
            [
                "4bb16e5e.abbfb"
            ]
        ]
    },
    {
        "id": "b451a8f8.3ef188",
        "type": "function",
        "z": "aacd54f2.c13278",
        "name": "Send Discovery Response",
        "func": "var question = msg.search_results.results[0].Title;\nvar answer = msg.search_results.results[0].Accepted_Answer;\n \nmsg.payload = {\n        chatId : msg.chatId,\n        type : \"message\",\n        content : \"I found this question that is similar to yours: \" + question\n    };\nnode.send(msg);\n \n// Use setTimeout function to ensure small delay in sending\n// 2nd message to ensure answer arrives after question.\n \nsetTimeout(function (){\n    msg.payload = {\n            chatId : msg.chatId,\n            type : \"message\",\n            content : \"And this is the answer: \" + answer\n        };\n    node.send(msg);\n \n    return;\n}, 500);\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1263.3333740234375,
        "y": 300.6666564941406,
        "wires": [
            [
                "6d97f5fe.6e2c3c"
            ]
        ]
    },
    {
        "id": "d705d3ce.f47ae",
        "type": "function",
        "z": "aacd54f2.c13278",
        "name": "Send Conversation Result",
        "func": "msg.topic = \"conversation\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 738,
        "y": 98,
        "wires": [
            [
                "dde6728.927cc9"
            ]
        ]
    },
    {
        "id": "4bb16e5e.abbfb",
        "type": "function",
        "z": "aacd54f2.c13278",
        "name": "Send Discovery Result",
        "func": "msg.topic = \"discovery\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 736,
        "y": 308,
        "wires": [
            [
                "dde6728.927cc9"
            ]
        ]
    },
    {
        "id": "dde6728.927cc9",
        "type": "function",
        "z": "aacd54f2.c13278",
        "name": "Wait, Merge, Prioritise Results",
        "func": "// Wait for messages from both Conversation and Discovery\n// to arrive.  msg.payload holds Conversation results,\n// msg.search_results holds Discovery results.  Save these\n// and chatId in context.\n\ncontext.data = context.data || {};\n\nswitch (msg.topic) {\n    case \"conversation\":\n        context.data.conversation = msg.payload;\n        context.data.chatId = msg.chatId;\n        msg = null;\n        break;\n    case \"discovery\":\n        context.data.discovery = msg.search_results;\n        context.data.chatId = msg.chatId;\n        msg = null;\n        break;\n    default:\n        msg = null;\n    \tbreak;\n}\n\n// When both messages have arrived, create new message with\n// Discovery and Conversation results, plus chatId\n\nif (context.data.conversation != null && context.data.discovery != null ) {\n\tmsg2 = {};\n\tmsg2.chatId = context.data.chatId;\n\tmsg2.search_results = context.data.discovery;\n    msg2.payload = context.data.conversation;\n\n// Go with Conversation result if intent confidence score > 80%\n// else return best Discovery result\n\n    var threshold = 0.8;\n    if ((msg2.payload.intents.length === 0 ||\n         msg2.payload.intents[0].confidence < threshold) &&\n         msg2.search_results.results.length > 0) {\n                msg2.payload.sendConversation = false;\n                }\n    else {\n        msg2.payload.sendConversation = true;\n        }\n\n    context.data = null;\n\treturn msg2;\n}\nelse return null;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 880,
        "y": 198,
        "wires": [
            [
                "c081ff2c.95dcb"
            ]
        ]
    },
    {
        "id": "c081ff2c.95dcb",
        "type": "switch",
        "z": "aacd54f2.c13278",
        "name": "",
        "property": "payload.sendConversation",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 1107,
        "y": 196,
        "wires": [
            [
                "2ae4c085.95e0b"
            ],
            [
                "b451a8f8.3ef188"
            ]
        ]
    },
    {
        "id": "4b287f18.5ee8b",
        "type": "telegram bot",
        "z": "",
        "botname": "WilsonGWBot",
        "usernames": "",
        "chatids": ""
    }
]
